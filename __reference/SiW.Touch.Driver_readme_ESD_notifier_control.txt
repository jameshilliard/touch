[Last updated : 2016.12.02]

###################################################################################################
# Preview                                                                                         #
###################################################################################################

The SiW AIT touch module basically consists of display and touch block
and these two parts area related to each other for mode mngt.
So, display driver and touch driver shall be connected and
touch driver supports notifer chain for this mode control


###################################################################################################
# Procedure                                                                                       #
###################################################################################################
* Basic flow

       Touch                                      LCD
         |                                         |
         |                                         |
     (1) |----- LCD_EVENT_TOUCH_ESD_DETECTED ----->|
         |                                         |
         |                                         |
         |                                         |
         |<--------- LCD_EVENT_HW_RESET -----------| (2)
         |                                         |
         |                                         | (3) LCD recovery
         |                                         |
         |<--------- LCD_EVENT_LCD_MODE -----------| (4)
         |                                         |

###################################################################################################
# [Touch side] ESD detection                                                                      #
###################################################################################################
* Touch sends ESD signal(LCD_EVENT_TOUCH_ESD_DETECTED) via notifier call chain
  and the LCD driver can receive this.

  <Status check in IRQ handler>
  static int siw_hal_check_status_type_x(struct device *dev,
				u32 status, u32 ic_status, int irq)
  {
	...

	if (esd_send) {
		if (chip->lcd_mode == LCD_MODE_U0) {
			ret = -ERESTART;
		} else {
		#if 1
			int esd = 1;
			ret = siw_touch_atomic_notifier_call(LCD_EVENT_TOUCH_ESD_DETECTED, (void*)&esd);
			if (ret)
				t_dev_err(dev, "check the value, %d\n", ret);
		#endif
		}
	}
	...
  }


###################################################################################################
# [LCD side] ESD recovery                                                                         #
###################################################################################################

  <Example - Recovery>
  /* */
  static void lcd_esd_recovery(void)
  {
	/*
	 * Step - 1
	 * Send RESET event to touch driver (ready state)
	 */
	siw_touch_notifier_call_chain(LCD_EVENT_HW_RESET, NULL)


	/*
	 * Step - 2
	 * Perform LCD recovery procedure for ESD
	 * including nReset control
	 */


	/*
	 * Step - 3
	 * Send lcd mode event to touch driver
	 * In this case, touch reset works automatically
	 * by the former LCD_EVENT_HW_RESET event
	 */
	siw_touch_notifier_call_chain(LCD_EVENT_LCD_MODE, (void *)&panel_mode)
  }


  <Example - How to register notifier call chain>
  static int lcd_atomic_notifier_callback(struct notifier_block *this,
					unsigned long event, void *data)
  {
	int ret = 0;
	switch (event) {
	case LCD_EVENT_TOUCH_ESD_DETECTED:
		pr_err("%s: LCD_EVENT_TOUCH_ESD_DETECTED received\n", __func__);
		ret = lcd_esd_recovery();
		pr_err("%s: LCD_ESD worked and returned %d\n", __func__, ret);
		break;
	default:
		break;
	}
	return 0;
  }

  int lcd_ctrl_probe(struct platform_device *pdev)
  {
	struct mdss_dsi_ctrl_pdata *ctrl_pdata = platform_get_drvdata(pdev);

	...

	ctrl_pdata->atomic_notif.notifier_call = lcd_atomic_notifier_callback;
	if (siw_touch_atomic_notifier_register(&ctrl_pdata->atomic_notif) != 0)
		pr_err("Failed to register callback\n");

	...
  }

  struct mdss_dsi_ctrl_pdata {
	...
	struct notifier_block	atomic_notif;
	...
  };

---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------



